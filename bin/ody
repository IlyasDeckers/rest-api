#!/usr/bin/env php
<?php
/**
 * ODY Framework Console Application
 */

// Define base path
define('APP_BASE_PATH', dirname(__DIR__));

// Set environment variable to indicate running in console
putenv('APP_RUNNING_IN_CONSOLE=1');
$_ENV['APP_RUNNING_IN_CONSOLE'] = 1;

// Error handling
set_error_handler(function($severity, $message, $file, $line) {
    if (!(error_reporting() & $severity)) {
        // This error code is not included in error_reporting
        return;
    }
    throw new ErrorException($message, 0, $severity, $file, $line);
});

// Find autoloader - check multiple possible locations
$possibleAutoloaderPaths = [
    APP_BASE_PATH . '/vendor/autoload.php', // Normal project installation
    APP_BASE_PATH . '/../../autoload.php',  // Vendor bin installation
    __DIR__ . '/../vendor/autoload.php',    // Local development
];

$autoloaderPath = null;
foreach ($possibleAutoloaderPaths as $path) {
    if (file_exists($path)) {
        $autoloaderPath = $path;
        break;
    }
}

if (!$autoloaderPath) {
    die('Could not find autoloader. Please make sure Composer dependencies are installed.');
}

try {
    // Include autoloader
    $autoloader = require $autoloaderPath;

    // Create a simple function to output colored text
    function colorize($text, $color) {
        $colors = [
            'red' => '0;31',
            'green' => '0;32',
            'yellow' => '0;33',
            'blue' => '0;34',
            'magenta' => '0;35',
            'cyan' => '0;36',
            'white' => '0;37',
        ];

        $colorCode = $colors[$color] ?? '0';
        return "\033[{$colorCode}m{$text}\033[0m";
    }

    // Create and run console kernel using the bootstrapper
    try {
        // Use the bootstrapper to create a properly initialized kernel
        $kernel = Ody\Foundation\Console\ConsoleBootstrapper::kernel();

        // Run the console application
        $status = $kernel->handle();
        exit($status);

    } catch (\Throwable $e) {
        echo colorize("\nError initializing console kernel: " . $e->getMessage() . "\n", 'red');

        // Create a fallback console app to help diagnose the issue
        $console = new Symfony\Component\Console\Application('ODY Console (Error Mode)');
        $console->setAutoExit(false);

        // Define a simple diagnostic command
        $command = new Symfony\Component\Console\Command\Command('diagnostics');
        $command->setDescription('Display diagnostic information');

        $command->setCode(function($input, $output) use ($e) {
            $style = new Symfony\Component\Console\Style\SymfonyStyle($input, $output);

            $style->title('ODY Console Error');
            $style->error($e->getMessage());

            $style->section('System Information');
            $style->table(
                ['Setting', 'Value'],
                [
                    ['PHP Version', PHP_VERSION],
                    ['PHP SAPI', PHP_SAPI],
                    ['OS', PHP_OS],
                    ['Current Directory', getcwd()],
                    ['Script Path', __FILE__],
                    ['Memory Limit', ini_get('memory_limit')],
                ]
            );

            $style->section('Stack Trace');
            $style->text($e->getTraceAsString());

            $style->section('Troubleshooting');
            $style->text([
                'To resolve this issue:',
                '1. Make sure all dependencies are installed: composer install',
                '2. Check the error message and stack trace for specific issues',
                '3. Ensure the LoggingServiceProvider is registered before using the console',
                '4. Run with --verbose flag for more detailed output'
            ]);

            return 0;
        });

        $console->add($command);
        $console->setDefaultCommand('diagnostics', true);
        $console->run();
        exit(1);
    }
} catch (\Throwable $e) {
    echo colorize("\nCritical error: " . $e->getMessage() . "\n", 'red');
    echo "Stack trace:\n";
    echo $e->getTraceAsString() . "\n";
    exit(1);
}